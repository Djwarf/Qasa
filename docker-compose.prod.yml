services:
  qasa-web:
    image: qasa-web:latest
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    ports:
      - "8090:8080"
    environment:
      - QASA_MODE=production
      - QASA_LOG_LEVEL=info
      - QASA_WEB_PORT=8080
      - QASA_NETWORK_PORT=9000
      - QASA_SSL_ENABLED=true
      - QASA_SSL_CERT_PATH=/app/ssl/cert.pem
      - QASA_SSL_KEY_PATH=/app/ssl/key.pem
    volumes:
      - ./ssl:/app/ssl:ro
      - qasa_data:/app/data
      - qasa_logs:/var/log/qasa
    networks:
      - qasa-network
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8091:80"
      - "8454:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - qasa-web
    networks:
      - qasa-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-qasa-secure-2024}
    volumes:
      - redis_data:/data
    networks:
      - qasa-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

  backup:
    image: alpine:latest
    restart: "no"
    command: /bin/sh -c "
      while true; do
        apk add --no-cache tar gzip openssh-client;
        tar -czf /backup/qasa-backup-$$(date +%Y%m%d_%H%M%S).tar.gz /app/data;
        find /backup -name '*.tar.gz' -mtime +7 -delete;
        sleep 86400;
      done"
    volumes:
      - qasa_data:/app/data:ro
      - backup_data:/backup
    networks:
      - qasa-network

networks:
  qasa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge

volumes:
  qasa_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local
  qasa_logs:
    driver: local
  nginx_logs:
    driver: local 