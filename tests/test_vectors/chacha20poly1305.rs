use qasa::chacha20poly1305::{
    ChaCha20Poly1305Key,
    ChaCha20Poly1305Nonce,
    encrypt,
    decrypt,
};

/// Test vectors for ChaCha20-Poly1305 from RFC 8439
pub fn get_test_vectors() -> Vec<ChaCha20Poly1305TestVector> {
    vec![
        // Test vector from RFC 8439, Section 2.8.2
        ChaCha20Poly1305TestVector {
            key: [
                0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
                0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
                0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
            ],
            nonce: [
                0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43,
                0x44, 0x45, 0x46, 0x47,
            ],
            aad: Some(vec![
                0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
                0xc4, 0xc5, 0xc6, 0xc7,
            ]),
            plaintext: vec![
                0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
                0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
                0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
                0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
                0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
                0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
                0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
                0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
                0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
                0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
                0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
                0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
                0x74, 0x2e,
            ],
            ciphertext: vec![
                0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
                0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
                0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
                0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
                0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
                0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
                0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
                0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
                0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
                0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
                0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
                0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
                0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
                0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
                0x61, 0x16,
            ],
            tag: vec![
                0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a,
                0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91,
            ],
        },
        // Additional test vector with empty plaintext
        ChaCha20Poly1305TestVector {
            key: [
                0x1c, 0x92, 0x40, 0xa5, 0xeb, 0x55, 0xd3, 0x8a,
                0xf3, 0x33, 0x88, 0x86, 0x04, 0xf6, 0xb5, 0xf0,
                0x47, 0x39, 0x17, 0xc1, 0x40, 0x2b, 0x80, 0x09,
                0x9d, 0xca, 0x5c, 0xbc, 0x20, 0x70, 0x75, 0xc0,
            ],
            nonce: [
                0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
                0x05, 0x06, 0x07, 0x08,
            ],
            aad: Some(vec![
                0xf3, 0x33, 0x88, 0x86, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x4e, 0x91,
            ]),
            plaintext: vec![],
            ciphertext: vec![],
            tag: vec![
                0xde, 0xa1, 0x58, 0x1e, 0xf7, 0xdd, 0xef, 0x7c,
                0xad, 0x10, 0x6b, 0x44, 0x2a, 0x3c, 0xa3, 0x7e,
            ],
        },
        // Test vector with no AAD
        ChaCha20Poly1305TestVector {
            key: [
                0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
                0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
                0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
            ],
            nonce: [
                0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43,
                0x44, 0x45, 0x46, 0x47,
            ],
            aad: None,
            plaintext: vec![
                0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
                0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
                0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
                0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
            ],
            ciphertext: vec![
                0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
                0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
                0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
                0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
            ],
            tag: vec![
                0x65, 0x15, 0xea, 0x32, 0x35, 0x29, 0x44, 0xbb,
                0x53, 0x8e, 0x7d, 0xb7, 0x56, 0x9a, 0x4c, 0x99,
            ],
        },
    ]
}

/// Test vector for ChaCha20-Poly1305
pub struct ChaCha20Poly1305TestVector {
    pub key: [u8; 32],
    pub nonce: [u8; 12],
    pub aad: Option<Vec<u8>>,
    pub plaintext: Vec<u8>,
    pub ciphertext: Vec<u8>,
    pub tag: Vec<u8>,
}

/// Run the test vectors
pub fn run_test_vectors() -> bool {
    let test_vectors = get_test_vectors();
    let mut success = true;

    for (i, test_vector) in test_vectors.iter().enumerate() {
        println!("Running ChaCha20-Poly1305 test vector {}", i + 1);

        // Create key and nonce
        let key = ChaCha20Poly1305Key::new(&test_vector.key).unwrap();
        let nonce = ChaCha20Poly1305Nonce::new(&test_vector.nonce).unwrap();

        // Encrypt
        let encrypted = encrypt(
            &test_vector.plaintext,
            test_vector.aad.as_deref(),
            &key,
            &nonce,
        ).unwrap();

        // Check ciphertext (without tag)
        let ciphertext_len = test_vector.ciphertext.len();
        if &encrypted[..ciphertext_len] != test_vector.ciphertext.as_slice() {
            println!("❌ Test vector {} encryption failed: ciphertext mismatch", i + 1);
            success = false;
            continue;
        }

        // Check tag
        if &encrypted[ciphertext_len..] != test_vector.tag.as_slice() {
            println!("❌ Test vector {} encryption failed: tag mismatch", i + 1);
            success = false;
            continue;
        }

        // Decrypt
        let decrypted = decrypt(
            &encrypted,
            test_vector.aad.as_deref(),
            &key,
            &nonce,
        ).unwrap();

        // Check plaintext
        if decrypted != test_vector.plaintext {
            println!("❌ Test vector {} decryption failed: plaintext mismatch", i + 1);
            success = false;
            continue;
        }

        // Test tampering detection
        if !encrypted.is_empty() {
            let mut tampered = encrypted.clone();
            tampered[0] ^= 1; // Flip one bit

            let tamper_result = decrypt(
                &tampered,
                test_vector.aad.as_deref(),
                &key,
                &nonce,
            );

            if tamper_result.is_ok() {
                println!("❌ Test vector {} tampering detection failed", i + 1);
                success = false;
                continue;
            }
        }

        println!("✅ Test vector {} passed", i + 1);
    }

    success
} 