name: QaSa CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rust-crypto:
    name: Rust Crypto Module
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install liboqs dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build
      
      - name: Format Check
        working-directory: ./src/crypto
        run: cargo fmt -- --check
      
      - name: Clippy
        working-directory: ./src/crypto
        run: cargo clippy -- -D warnings
      
      - name: Build
        working-directory: ./src/crypto
        run: cargo build --verbose
      
      - name: Test
        working-directory: ./src/crypto
        run: cargo test --verbose
      
      - name: Upload Crypto Library
        uses: actions/upload-artifact@v4
        with:
          name: crypto-lib
          path: ./src/crypto/target/debug/libqasa_crypto.so
          retention-days: 1

  go-network:
    name: Go Network Module
    runs-on: ubuntu-latest
    needs: [rust-crypto]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Download Crypto Library
        uses: actions/download-artifact@v4
        with:
          name: crypto-lib
          path: /usr/local/lib
      
      - name: Set library permissions and update cache
        run: |
          sudo chmod +x /usr/local/lib/libqasa_crypto.so
          sudo ldconfig
      
      - name: Format Check
        working-directory: ./src/network
        run: test -z "$(gofmt -l .)"
      
      - name: Go vet
        working-directory: ./src/network
        run: go vet ./...
      
      - name: Install dependencies
        working-directory: ./src/network
        run: |
          go mod tidy
          go mod download
      
      - name: Build
        working-directory: ./src/network
        run: go build -v ./...
      
      - name: Test
        working-directory: ./src/network
        run: go test -v ./...
        env:
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Rust Security Audit
        working-directory: ./src/crypto
        run: cargo audit
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Go Security Scan
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec ./src/network/...

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-crypto, go-network]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Build Crypto Module
        working-directory: ./src/crypto
        run: cargo build --verbose
      
      - name: Install shared library
        run: |
          sudo cp ./src/crypto/target/debug/libqasa_crypto.so /usr/local/lib/
          sudo chmod +x /usr/local/lib/libqasa_crypto.so
          sudo ldconfig
      
      - name: Build Network Module
        working-directory: ./src/network
        run: go build -v ./...
      
      - name: Run basic integration test
        run: |
          echo "Starting integration test..."
          # Run the QaSa node in the background
          ./src/network/network --port 9000 --enable-mdns true --require-auth true &
          PID=$!
          
          # Wait for node to start
          sleep 5
          
          # Check if node is running
          if ps -p $PID > /dev/null; then
            echo "Node started successfully"
            kill $PID
            echo "Integration test passed"
          else
            echo "Failed to start node"
            exit 1
          fi
        env:
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH 