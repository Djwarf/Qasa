name: QaSa CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  RUST_VERSION: 'stable'

jobs:
  rust-crypto:
    name: Rust Crypto Module
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src/crypto/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libssl-dev pkg-config
      
      - name: Format Check
        working-directory: ./src/crypto
        run: cargo fmt -- --check
      
      - name: Clippy
        working-directory: ./src/crypto
        run: cargo clippy -- -D warnings
      
      - name: Build (Debug)
        working-directory: ./src/crypto
        run: cargo build --verbose
      
      - name: Build (Release)
        working-directory: ./src/crypto
        run: cargo build --release --verbose
      
      - name: Test
        working-directory: ./src/crypto
        run: cargo test --verbose
      
      - name: Benchmark
        working-directory: ./src/crypto
        run: cargo bench --no-run
      
      - name: Upload Crypto Library (Debug)
        uses: actions/upload-artifact@v4
        with:
          name: crypto-lib-debug
          path: |
            ./src/crypto/target/debug/libqasa_crypto.so
            ./src/crypto/target/debug/libqasa_crypto.dylib
          retention-days: 1
          if-no-files-found: ignore
      
      - name: Upload Crypto Library (Release)
        uses: actions/upload-artifact@v4
        with:
          name: crypto-lib-release
          path: |
            ./src/crypto/target/release/libqasa_crypto.so
            ./src/crypto/target/release/libqasa_crypto.dylib
          retention-days: 7
          if-no-files-found: ignore

  go-modules:
    name: Go Modules
    runs-on: ubuntu-latest
    needs: [rust-crypto]
    strategy:
      matrix:
        module: [network, web]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.module }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.module }}-
            ${{ runner.os }}-go-
      
      - name: Download Crypto Library (Debug)
        uses: actions/download-artifact@v4
        with:
          name: crypto-lib-debug
          path: /tmp/crypto-lib
      
      - name: Install crypto library
        run: |
          sudo mkdir -p /usr/local/lib
          sudo cp /tmp/crypto-lib/libqasa_crypto.so /usr/local/lib/ 2>/dev/null || true
          sudo cp /tmp/crypto-lib/libqasa_crypto.dylib /usr/local/lib/ 2>/dev/null || true
          sudo chmod +x /usr/local/lib/libqasa_crypto.* 2>/dev/null || true
          sudo ldconfig 2>/dev/null || true
      
      - name: Format Check
        working-directory: ./src/${{ matrix.module }}
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted:"
            gofmt -l .
            exit 1
          fi
      
      - name: Go vet
        working-directory: ./src/${{ matrix.module }}
        run: go vet ./...
      
      - name: Install dependencies
        working-directory: ./src/${{ matrix.module }}
        run: |
          go mod tidy
          go mod download
          go mod verify
      
      - name: Build
        working-directory: ./src/${{ matrix.module }}
        run: go build -v ./...
        env:
          CGO_ENABLED: 1
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH
      
      - name: Test
        working-directory: ./src/${{ matrix.module }}
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          CGO_ENABLED: 1
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./src/${{ matrix.module }}/coverage.out
          flags: ${{ matrix.module }}
          name: codecov-${{ matrix.module }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      
      - name: Rust Security Audit
        working-directory: ./src/crypto
        run: cargo audit
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      
      - name: Go Security Scan - Network
        working-directory: ./src/network
        run: gosec -fmt sarif -out gosec-network.sarif ./...
        continue-on-error: true
      
      - name: Go Security Scan - Web
        working-directory: ./src/web
        run: gosec -fmt sarif -out gosec-web.sarif ./...
        continue-on-error: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: src/network/gosec-network.sarif
        continue-on-error: true
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: src/web/gosec-web.sarif
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-crypto, go-modules]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      
      - name: Download Crypto Library (Release)
        uses: actions/download-artifact@v4
        with:
          name: crypto-lib-release
          path: /tmp/crypto-lib
      
      - name: Install crypto library
        run: |
          sudo mkdir -p /usr/local/lib
          sudo cp /tmp/crypto-lib/libqasa_crypto.so /usr/local/lib/ 2>/dev/null || true
          sudo cp /tmp/crypto-lib/libqasa_crypto.dylib /usr/local/lib/ 2>/dev/null || true
          sudo chmod +x /usr/local/lib/libqasa_crypto.* 2>/dev/null || true
          sudo ldconfig 2>/dev/null || true
      
      - name: Build Network Module
        working-directory: ./src/network
        run: |
          go mod download
          go build -o qasa-network ./cmd/network
        env:
          CGO_ENABLED: 1
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH
      
      - name: Build Web Module
        working-directory: ./src/web
        run: |
          go mod download
          go build -o qasa-web ./cmd/web
        env:
          CGO_ENABLED: 1
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH
      
      - name: Run Integration Tests
        run: |
          echo "Starting QaSa integration tests..."
          
          # Start network node in background
          cd src/network
          ./qasa-network --port 9001 --enable-mdns=false --require-auth=false &
          NETWORK_PID=$!
          echo "Network PID: $NETWORK_PID"
          
          # Start web server in background
          cd ../web
          ./qasa-web --port 8081 --network-port 9001 &
          WEB_PID=$!
          echo "Web PID: $WEB_PID"
          
          # Wait for services to start
          sleep 10
          
          # Basic health checks
          echo "Checking if network node is running..."
          if ps -p $NETWORK_PID > /dev/null; then
            echo "✓ Network node is running"
          else
            echo "✗ Network node failed to start"
            exit 1
          fi
          
          echo "Checking if web server is running..."
          if ps -p $WEB_PID > /dev/null; then
            echo "✓ Web server is running"
          else
            echo "✗ Web server failed to start"
            kill $NETWORK_PID 2>/dev/null || true
            exit 1
          fi
          
          # Test web interface
          echo "Testing web interface..."
          curl -f http://localhost:8081/api/status || {
            echo "✗ Web interface health check failed"
            kill $NETWORK_PID $WEB_PID 2>/dev/null || true
            exit 1
          }
          echo "✓ Web interface is responding"
          
          # Cleanup
          kill $NETWORK_PID $WEB_PID 2>/dev/null || true
          echo "✓ Integration tests completed successfully"
        env:
          LD_LIBRARY_PATH: /usr/local/lib:$LD_LIBRARY_PATH

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: qasa-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm -d --name qasa-test -p 8080:8080 qasa-web:test
          sleep 10
          curl -f http://localhost:8080/api/status || exit 1
          docker stop qasa-test
          echo "✓ Docker image test passed" 