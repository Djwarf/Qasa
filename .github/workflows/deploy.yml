name: Deploy QaSa

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'docker'
        type: choice
        options:
        - docker
        - kubernetes
        - native

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.23'
  RUST_VERSION: 'stable'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-labels: ${{ steps.meta.outputs.labels }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            RUST_VERSION=${{ env.RUST_VERSION }}

      - name: Test deployment scripts
        run: |
          chmod +x deploy.sh quick-deploy.sh
          ./deploy.sh --build-only --skip-tests --no-docker
          echo "✓ Deployment scripts validated"

      - name: Generate deployment manifests
        run: |
          mkdir -p deploy-artifacts
          
          # Generate docker-compose for different environments
          envsubst < docker-compose.yml > deploy-artifacts/docker-compose-staging.yml
          envsubst < docker-compose.prod.yml > deploy-artifacts/docker-compose-production.yml
          
          # Copy deployment scripts
          cp deploy.sh quick-deploy.sh deploy-artifacts/
          cp -r monitoring deploy-artifacts/
          
          echo "✓ Deployment artifacts generated"
        env:
          IMAGE_TAG: ${{ steps.meta.outputs.tags }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deploy-artifacts/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container scan
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload container scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.qasa.example.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: ./deploy

      - name: Setup kubectl
        if: github.event.inputs.deploy_type == 'kubernetes' || github.event.inputs.deploy_type == ''
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure staging environment
        run: |
          cat > staging.env << EOF
          QASA_MODE=staging
          QASA_WEB_PORT=8080
          QASA_NETWORK_PORT=9000
          QASA_ENABLE_MDNS=true
          QASA_ENABLE_DHT=true
          QASA_LOG_LEVEL=info
          QASA_METRICS_ENABLED=true
          DOCKER_IMAGE=${{ needs.build.outputs.image-tag }}
          EOF

      - name: Deploy with Docker Compose (Staging)
        if: github.event.inputs.deploy_type == 'docker' || github.event.inputs.deploy_type == ''
        run: |
          # Load environment variables
          set -a
          source staging.env
          set +a
          
          # Deploy using docker-compose
          docker-compose -f deploy/docker-compose-staging.yml up -d
          
          echo "✓ Staging deployment completed with Docker"
        env:
          DOCKER_HOST: ${{ secrets.STAGING_DOCKER_HOST }}

      - name: Deploy to Kubernetes (Staging)
        if: github.event.inputs.deploy_type == 'kubernetes'
        run: |
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/qasa-web -n qasa-staging --timeout=300s
          
          echo "✓ Staging deployment completed with Kubernetes"
        env:
          KUBECONFIG: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Health check
        run: |
          echo "Performing staging health check..."
          
          # Wait for service to be ready
          for i in {1..30}; do
            if curl -f https://staging.qasa.example.com/api/status > /dev/null 2>&1; then
              echo "✓ Staging health check passed"
              break
            fi
            echo "Waiting for staging service... ($i/30)"
            sleep 10
          done
          
          # Final health check
          curl -f https://staging.qasa.example.com/api/status
          curl -f https://staging.qasa.example.com/api/peers

      - name: Run staging tests
        run: |
          echo "Running staging integration tests..."
          
          # Test WebSocket connection
          curl -f -H "Upgrade: websocket" -H "Connection: Upgrade" \
               -H "Sec-WebSocket-Key: test" -H "Sec-WebSocket-Version: 13" \
               https://staging.qasa.example.com/ws
          
          echo "✓ Staging tests completed"

  deploy-production:
    name: Deploy to Production
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://qasa.example.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: ./deploy

      - name: Setup kubectl
        if: github.event.inputs.deploy_type == 'kubernetes' || github.event.inputs.deploy_type == ''
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure production environment
        run: |
          cat > production.env << EOF
          QASA_MODE=production
          QASA_WEB_PORT=8080
          QASA_NETWORK_PORT=9000
          QASA_ENABLE_MDNS=false
          QASA_ENABLE_DHT=true
          QASA_LOG_LEVEL=warn
          QASA_METRICS_ENABLED=true
          QASA_BACKUP_ENABLED=true
          DOCKER_IMAGE=${{ needs.build.outputs.image-tag }}
          EOF

      - name: Deploy with Docker Compose (Production)
        if: github.event.inputs.deploy_type == 'docker' || github.event.inputs.deploy_type == ''
        run: |
          # Load environment variables
          set -a
          source production.env
          set +a
          
          # Deploy using production docker-compose
          docker-compose -f deploy/docker-compose-production.yml up -d
          
          echo "✓ Production deployment completed with Docker"
        env:
          DOCKER_HOST: ${{ secrets.PRODUCTION_DOCKER_HOST }}

      - name: Deploy to Kubernetes (Production)
        if: github.event.inputs.deploy_type == 'kubernetes'
        run: |
          # Apply Kubernetes manifests with production configs
          kubectl apply -f k8s/namespace-prod.yaml
          kubectl apply -f k8s/configmap-prod.yaml
          kubectl apply -f k8s/deployment-prod.yaml
          kubectl apply -f k8s/service-prod.yaml
          kubectl apply -f k8s/ingress-prod.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/qasa-web -n qasa-production --timeout=600s
          
          echo "✓ Production deployment completed with Kubernetes"
        env:
          KUBECONFIG: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Production health check
        run: |
          echo "Performing production health check..."
          
          # Wait for service to be ready
          for i in {1..60}; do
            if curl -f https://qasa.example.com/api/status > /dev/null 2>&1; then
              echo "✓ Production health check passed"
              break
            fi
            echo "Waiting for production service... ($i/60)"
            sleep 10
          done
          
          # Comprehensive health checks
          curl -f https://qasa.example.com/api/status
          curl -f https://qasa.example.com/api/peers
          curl -f https://qasa.example.com/metrics

      - name: Update monitoring
        run: |
          echo "Updating monitoring configuration..."
          
          # Deploy monitoring stack
          if [ -d "deploy/monitoring" ]; then
            docker-compose -f deploy/monitoring/docker-compose.yml up -d
          fi
          
          echo "✓ Monitoring updated"

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: QaSa Release ${{ github.ref }}
          body: |
            ## QaSa Release ${{ github.ref }}
            
            ### Changes
            - Automatic release from deployment pipeline
            
            ### Docker Images
            - `${{ needs.build.outputs.image-tag }}`
            
            ### Deployment
            - Production: https://qasa.example.com
            - Staging: https://staging.qasa.example.com
          draft: false
          prerelease: false

  performance-tests:
    name: Performance Tests
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run load tests
        run: |
          echo "Running performance tests against staging..."
          
          # Install hey for load testing
          wget -q https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64 -O hey
          chmod +x hey
          
          # Run load tests
          ./hey -n 1000 -c 10 https://staging.qasa.example.com/api/status
          ./hey -n 100 -c 5 -m POST -H "Content-Type: application/json" \
               -d '{"test":"data"}' https://staging.qasa.example.com/api/test
          
          echo "✓ Performance tests completed"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-tests]
    if: always()
    steps:
      - name: Clean up old deployments
        run: |
          echo "Cleaning up old deployments and artifacts..."
          
          # Remove old Docker images (keep last 3)
          # This would typically be done on the deployment servers
          
          echo "✓ Cleanup completed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, performance-tests]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] && \
             [ "${{ needs.deploy-production.result }}" == "success" ] || \
             [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
            echo "🎉 QaSa deployment successful!"
            echo "📊 Performance tests: ${{ needs.performance-tests.result }}"
          else
            echo "❌ QaSa deployment failed!"
            echo "🔍 Check the deployment logs for details"
            exit 1
          fi

      - name: Send notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            QaSa Deployment Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Staging: ${{ needs.deploy-staging.result }}
            Production: ${{ needs.deploy-production.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 