[package]
name = "qasa"
version = "0.0.4"
edition = "2021"
description = "Post-quantum cryptography implementation using CRYSTALS-Kyber and CRYSTALS-Dilithium for quantum-safe communications"
authors = ["QaSa Team <djwarfqasa@proton.me>"]
license = "MIT"
repository = "https://github.com/Djwarf/Qasa"
homepage = "https://github.com/Djwarf/Qasa"
documentation = "https://github.com/Djwarf/Qasa/blob/main/Documentation.md"
readme = "README.md"
keywords = ["cryptography", "post-quantum", "kyber", "dilithium", "quantum-safe"]
categories = ["cryptography", "algorithms", "encoding", "authentication", "network-programming"]
exclude = [
    "target/*",
    ".git/*",
    ".github/*",
    "tests/test_vectors/*",
    "*.log"
]

[lib]
name = "qasa"
crate-type = ["cdylib", "rlib"]

[dependencies]
# Post-quantum cryptography library
oqs = "0.8.0"
# For AES-GCM implementation
aes-gcm = "0.10.3"
# For more general cryptographic operations
rand = "0.8.5"
getrandom = "0.2.10"
# For serialization/deserialization
serde = { version = "1.0.183", features = ["derive"] }
serde_json = "1.0.105"
bincode = "1.3.3"
sha3 = "0.10.8"
# For error handling
thiserror = "1.0.47"
# For key management and storage
chacha20poly1305 = "0.10.1"
argon2 = "0.5.0"
base64 = "0.13.0"
# For hashing operations
sha2 = "0.10.6"
# For handling home directory paths
dirs = "5.0.1"
libc = "0.2.172"
subtle = { version = "2.6.1", features = ["std"] }
zeroize = { version = "1.8.1", features = ["derive"] }
uuid = { version = "1.16.0", features = ["v4"] }
chrono = { version = "0.4.41", features = ["serde"] }
log = "0.4.21"
winapi = { version = "0.3.9", features = ["memoryapi", "handleapi", "winbase"] }

[dev-dependencies]
criterion = "0.5.1"
tempfile = "3.8.0"
proptest = "1.4.0"

[[bench]]
name = "crypto_benchmarks"
harness = false

[[example]]
name = "secure_communication"
doc-scrape-examples = true

[[example]]
name = "quantum_signatures"
doc-scrape-examples = true

[[example]]
name = "oqs_correct_api"
doc-scrape-examples = true

[features]
default = ["simd"]
# Enable optimized implementations for constrained environments
lean = []
# Enable SIMD optimizations when available  
simd = []
# Enable hardware acceleration when available
hardware-acceleration = ["simd"]
# Enable additional debugging and profiling features
debug = []
# Enable constant-time verification testing
constant-time-testing = []
# Enable formal verification support
formal-verification = []
# Enable security auditing features
security-audit = []

[package.metadata.docs.rs]
# Enable all features for documentation generation
all-features = true
# Generate documentation for the target platform
targets = ["x86_64-unknown-linux-gnu", "x86_64-pc-windows-msvc", "x86_64-apple-darwin"]

[badges]
maintenance = { status = "actively-developed" }
